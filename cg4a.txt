#include <iostream> 
#include <cmath> 
 
#define PI 3.14159265 
 
class Point { 
private: 
    float x, y; 
 
public: 
    Point(float x = 0, float y = 0) : x(x), y(y) {} 
 
    // Display the point 
    void display() const { 
        std::cout << "(" << x << ", " << y << ")" << std::endl; 
    } 
 
    // Overload + operator for translation 
    Point operator + (const Point& p) const { 
        return Point(x + p.x, y + p.y); 
    } 
 
    // Overload * operator for scaling 
    Point operator * (float scale) const { 
        return Point(x * scale, y * scale); 
    } 
 
    // Rotate the point by an angle (in degrees) 
    Point rotate(float angle) const { 
        float rad = angle * PI / 180.0;  // Convert angle to radians 
        float newX = x * cos(rad) - y * sin(rad); 
        float newY = x * sin(rad) + y * cos(rad); 
        return Point(newX, newY); 
    } 
}; 
 
int main() { 
    float x, y, scale, angle, tx, ty; 
 
    // Input initial point coordinates 
    std::cout << "Enter the coordinates of the point (x y): "; 
    std::cin >> x >> y; 
    Point p(x, y); 
 
    // Display original point 
    std::cout << "Original point: "; 
    p.display(); 
 
    // Translation 
    std::cout << "\nEnter translation factors (tx ty): "; 
    std::cin >> tx >> ty; 
    Point translation(tx, ty); 
    Point translatedPoint = p + translation; 
    std::cout << "After translation: "; 
    translatedPoint.display(); 
 
    // Scaling 
    std::cout << "\nEnter scaling factor: "; 
    std::cin >> scale; 
Point scaledPoint = p * scale; 
std::cout << "After scaling: "; 
scaledPoint.display(); 
// Rotation 
std::cout << "\nEnter rotation angle (in degrees): "; 
std::cin >> angle; 
Point rotatedPoint = p.rotate(angle); 
std::cout << "After rotation: "; 
rotatedPoint.display(); 
return 0; 
} 
