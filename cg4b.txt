#include <iostream> 
#include <cmath> 
 
#define PI 3.14159265 
 
class Point { 
public: 
    float x, y; 
 
    Point(float x = 0, float y = 0) : x(x), y(y) {} 
 
    // Display the point 
    void display() const { 
        std::cout << "(" << x << ", " << y << ")"; 
    } 
 
    // Overload + operator for translation 
    Point operator + (const Point& p) const { 
        return Point(x + p.x, y + p.y); 
    } 
 
    // Overload * operator for scaling 
    Point operator * (float scale) const { 
        return Point(x * scale, y * scale); 
    } 
 
    // Rotate the point by an angle (in degrees) 
    Point rotate(float angle) const { 
        float rad = angle * PI / 180.0;  // Convert angle to radians 
        float newX = x * cos(rad) - y * sin(rad); 
        float newY = x * sin(rad) + y * cos(rad); 
        return Point(newX, newY); 
    } 
}; 
 
class Shape { 
public: 
    virtual void display() const = 0; 
    virtual void translate(const Point& offset) = 0; 
    virtual void scale(float factor) = 0; 
    virtual void rotate(float angle) = 0; 
}; 
 
class Triangle : public Shape { 
private: 
    Point vertices[3]; 
 
public: 
    Triangle(Point v1, Point v2, Point v3) { 
        vertices[0] = v1; 
        vertices[1] = v2; 
        vertices[2] = v3; 
    } 
 
    void display() const override { 
        std::cout << "Triangle vertices:\n"; 
        for (const auto& v : vertices) { 
            v.display(); 
            std::cout << " "; 
        } 
        std::cout << std::endl; 
    } 
 
    void translate(const Point& offset) override { 
        for (auto& v : vertices) { 
            v = v + offset; 
        } 
    } 
 
    void scale(float factor) override { 
        for (auto& v : vertices) { 
            v = v * factor; 
        } 
    } 
 
    void rotate(float angle) override { 
        for (auto& v : vertices) { 
            v = v.rotate(angle); 
        } 
    } 
}; 
 
class Rhombus : public Shape { 
private: 
    Point vertices[4]; 
 
public: 
    Rhombus(Point v1, Point v2, Point v3, Point v4) { 
        vertices[0] = v1; 
        vertices[1] = v2; 
        vertices[2] = v3; 
        vertices[3] = v4; 
    } 
 
    void display() const override { 
        std::cout << "Rhombus vertices:\n"; 
        for (const auto& v : vertices) { 
            v.display(); 
            std::cout << " "; 
        } 
        std::cout << std::endl; 
    } 
 
    void translate(const Point& offset) override { 
        for (auto& v : vertices) { 
            v = v + offset; 
        } 
    } 
 
    void scale(float factor) override { 
        for (auto& v : vertices) { 
            v = v * factor; 
        } 
    } 
 
    void rotate(float angle) override { 
        for (auto& v : vertices) { 
            v = v.rotate(angle); 
        } 
    } 
}; 
 
int main() { 
    // Define an equilateral triangle and a rhombus 
    Triangle triangle(Point(0, 0), Point(1, 0), Point(0.5, sqrt(3) / 2)); 
    Rhombus rhombus(Point(-1, 0), Point(0, 1), Point(1, 0), Point(0, -1)); 
 
    // Display original shapes 
    std::cout << "Original Shapes:\n"; 
    triangle.display(); 
    rhombus.display(); 
 
    // Translation 
    Point translationOffset(1, 1); 
    triangle.translate(translationOffset); 
    rhombus.translate(translationOffset); 
    std::cout << "\nAfter Translation:\n"; 
    triangle.display(); 
    rhombus.display(); 
 
    // Scaling 
    float scaleFactor = 2; 
    triangle.scale(scaleFactor); 
    rhombus.scale(scaleFactor); 
    std::cout << "\nAfter Scaling:\n"; 
    triangle.display(); 
    rhombus.display(); 
 
    // Rotation 
    float rotationAngle = 45;  // Rotate by 45 degrees 
    triangle.rotate(rotationAngle); 
    rhombus.rotate(rotationAngle); 
    std::cout << "\nAfter Rotation:\n"; 
    triangle.display(); 
    rhombus.display(); 
 
    return 0; 
} 
 
 
